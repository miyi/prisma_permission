star.acf <- acf(star, lag='20')
star.acf <- acf(star, lag='25')
1/13
1/14
1/15
star.acf <- acf(star, lag='max')
star.acf <- acf(star, lag='100')
which.max(spc2)
which.max(spc2$spec)
spc2 <- spec.pgram(star, log='no')
spc2$freq(21)
spc2$freq[21]
1/28
library(MASS)
data(accdeaths)
ad <= accdeaths
ad <- accdeaths
ad.acf <- acf(ad)
ad.acf <- acf(ad, lag='max')
dim(ad)
ts(ad)
adts <- ts(ad)
ad.acf <- acf(ad, lag='max')
dim(ad)
ad.acf <- acf(ad, lag='20')
ad.acf <- acf(ad, lag='30')
spc3 <- spec.pgram(ad)
spc3 <- spec.pgram(ad, log='no')
accdeaths
adts <- ts(ad)
adts
adts <- data.frame(adts)
View(adts)
adts <- data.frame(adts,seq(1,72,1))
View(adts)
adts <- data.frame(adts,t=seq(1,72,1))
adts <- ts(ad)
adts <- data.frame(adts,t=seq(1,72,1))
fp <- rep(NA,12)
p <- seq(3,36,3)
adlm <- lm(adts ~ sin(2*pi*t)+cos(2*pi*t),data=adts)
summary(adlm)
N <- 72
adlm <- lm(adts ~ sin(2*pi*2/N*t)+cos(2*pi*2/N*t),data=adts)
summary(adlm)
head(adlm)
summ<-summary(adlm)
head(summ)
adlm
adlm <- lm(adts ~ sin(2*pi*3/N*t)+cos(2*pi*2/N*t),data=adts)
summary(adlm)
p <- 3
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
rn <- rnorm(160,0,1)
dt <- ts(rn)
spc1<-spec.pgram(dt, log='no')
c1 <- cumsum(spc1$spec)
c1 <- cumsum(spc1$spec)/c1[80]
k1 <- (1:80)/80
cpgram(dt)
star <- read.table('Documents/stat443/assn2/star.dat')
spc2 <- spec.pgram(star, log='no')
cpgram(star)
star.acf <- acf(star, lag='100')
library(MASS)
data(accdeaths)
ad <- accdeaths
ad.acf <- acf(ad, lag='30')
)
spc3 <- spec.pgram(ad, log='no')
p <- 3
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 6
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 9
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 12
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 6
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 12
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 15
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 18
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 21
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 24
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 27
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 30
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 33
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
p <- 36
adlm <- lm(adts ~ sin(2*pi*p/N*t)+cos(2*pi*p/N*t),data=adts)
summary(adlm)
12*pi/36
2*pi
6*pi/36
pi
t<-(1:72)
adts <- ts(ad)
fit2<-lm(adts~cos(w*t)+sin(w*t))
fit2<-lm(adts~sin(2*pi*p/N*t)+cos(2*pi*p/N*t))
summary(fit2)
p <- 6
fit2<-lm(adts~sin(2*pi*p/N*t)+cos(2*pi*p/N*t))
summary(fit2)
w<-(2*pi*0)/36
w<-(2*pi*3)/72
fit2<-lm(adts~sin(2*pi*p/N*t)+cos(2*pi*p/N*t))
summary(fit2)
w<-(2*pi*6)/72
fit2<-lm(adts~sin(2*pi*p/N*t)+cos(2*pi*p/N*t))
summary(fit2)
6*pi/36
2*pi/0.5235988
2*pi*6/48
pi/0.7853982
2*pi/0.7853982
getwd()
set.seed(1)
x <- sort(rnorm(20, mean=0, sd=2))
y <- x + rnorm(20, mean=0, sd=1)
dat <- cbind(x, y)
par(mfrow=c(1, 2))
plot(x, y, type="n", main="The Original X and Y", xlim=c(-4, 4), ylim=c(-4, 4))
text(x, y, as.character(1:20))
arrows(-4, -4, 4, 4, lty=1, col="red")
arrows(2, -2, -2, 2, lty=2, col="red")
dat.pc <- princomp(dat, cor = TRUE, scores = TRUE)
summary(dat.pc)
wMx <- loadings(dat.pc)
wMx[2,1]/wMx[1,1]
plot(dat.pc$scores, type="n", main="The New Coordinate System", xlim=c(-4, 4), ylim=c(-4, 4))
text(dat.pc$scores[,1], dat.pc$scores[,2], as.character(1:20) )
arrows(-4, 0, 4, 0, lty=1, col="red")
arrows(0,-2, 0,  2, lty=2, col="red")
dat <- read.table("Documents/stat306/lab11/decathlon.txt", header=T)
View(dat)
m800=c(2.15, 2, 2.1, 1.96, 2.24, 2.05, 2.22, 2.28, 2.24, 2.12, 2.33, 2.02, 1.99, 1.96, 2.02, 2, 2.15, 2.2, 2, 2.18, 2.04, 2.19, 1.97, 2.03, 1.89, 2.03, 1.99, 2.15, 2.27, 2.03, 1.89, 2.02, 2.3, 1.95, 1.92, 2.08, 2.21, 2.09, 2.05, 2.16, 2.05, 2.11, 1.98, 2.1, 2.19, 2.1, 1.95, 2, 2.01, 2.1, 2.09, 2.07, 1.98, 2.07)
m800=m800*60
m1500=m1500*60
m3000=m3000*60
marathon=marathon*60
m100=c(11.61, 11.73, 11.45, 11.29, 12.25, 11.8, 11.85, 11.84, 11.79, 12.3, 12.74, 11.45, 11.43, 10.79, 11.55, 11.41, 11.98, 11.75, 11, 12.14, 11.89, 12.23, 12.25, 11.42, 11.06, 11.58, 11.25, 11.96, 11.76, 11.13, 11.09, 11.16, 12.9, 11.13, 11.44, 11.95, 11.96, 11.73, 12, 11.46, 11.43, 11.6, 11, 11.22, 11.76, 11.95, 11.01, 11.15, 11.45, 11.31, 11.81, 11.79, 11.2, 12.03)
m200=c(22.94, 23.88, 23.57, 23, 25.07, 23.98, 24.24, 24.54, 24.05, 25, 25.85, 23.31, 23.09, 21.83, 23.13, 23.04, 24.44, 24.46, 22.25, 24.47, 23.62, 24.21, 25.78, 23.52, 22.19, 23.31, 22.81, 24.49, 25.08, 22.39, 21.97, 22.82, 27.1, 22.21, 23.46, 24.41, 24.6, 24, 24.52, 23.05, 23.51, 24, 22.13, 22.62, 23.54, 24.28, 22.39, 22.59, 23.06, 23.17, 24.22, 24.08, 22.35, 24.96)
m400=c(54.5, 52.7, 54.9, 52.01, 56.96, 53.59, 55.34, 56.09, 56.05, 55.08, 58.73, 53.11, 50.62, 50.62, 51.6, 52, 56.45, 55.8, 50.06, 55, 53.76, 55.09, 51.2, 53.6, 49.19, 53.12, 52.38, 55.7, 58.1, 50.14, 47.99, 51.79, 60.4, 49.29, 51.2, 54.97, 58.25, 53.73, 54.9, 53.3, 53.24, 53.26, 50.46, 52.5, 54.6, 53.6, 49.75, 51.73, 51.5, 52.8, 54.3, 54.93, 51.08, 56.1)
m800=c(2.15, 2, 2.1, 1.96, 2.24, 2.05, 2.22, 2.28, 2.24, 2.12, 2.33, 2.02, 1.99, 1.96, 2.02, 2, 2.15, 2.2, 2, 2.18, 2.04, 2.19, 1.97, 2.03, 1.89, 2.03, 1.99, 2.15, 2.27, 2.03, 1.89, 2.02, 2.3, 1.95, 1.92, 2.08, 2.21, 2.09, 2.05, 2.16, 2.05, 2.11, 1.98, 2.1, 2.19, 2.1, 1.95, 2, 2.01, 2.1, 2.09, 2.07, 1.98, 2.07)
m800=m800*60
m1500=c(4.43, 4.15, 4.25, 3.98, 4.84, 4.14, 4.61, 4.86, 4.74, 4.52, 5.81, 4.07, 4.22, 3.95, 4.18, 4.14, 4.37, 4.72, 4.06, 4.45, 4.25, 4.69, 4.25, 4.18, 3.87, 4.01, 4.06, 4.42, 4.79, 4.1, 4.14, 4.12, 4.84, 3.99, 3.96, 4.33, 4.68, 4.35, 4.23, 4.58, 4.11, 4.35, 4.03, 4.38, 4.6, 4.32, 4.03, 4.14, 4.14, 4.49, 4.16, 4.35, 4.13, 4.38)
m1500=m1500*60
m3000=c(9.79, 9.2, 9.37, 8.63, 10.69, 9.02, 10.02, 10.54, 9.89, 9.94, 13.04, 8.77, 9.34, 8.5, 8.76, 8.88, 9.38, 10.28, 8.81, 9.51, 9.59, 10.46, 9.35, 8.71, 8.45, 8.53, 9.01, 9.62, 10.9, 8.92, 8.92, 8.84, 11.1, 8.97, 8.53, 9.31, 10.43, 9.2, 9.37, 9.81, 8.89, 9.46, 8.62, 9.63, 10.16, 9.98, 8.59, 8.98, 8.98, 9.77, 8.84, 9.87, 9.08, 9.64)
m3000=m3000*60
marathon=c(178.52, 181.05, 160.48, 151.82, 233, 162.6, 201.28, 215.08, 203.88, 182.77, 306, 153.42, 159.37, 142.72, 145.48, 157.85, 201.08, 168.45, 149.45, 191.02, 158.53, 182.17, 179.17, 151.75, 151.22, 145.48, 152.48, 164.65, 261.13, 154.23, 158.85, 154.48, 233.22, 160.82, 165.45, 168.48, 171.8, 150.5, 171.38, 169.98, 149.38, 165.42, 149.72, 177.87, 200.37, 188.03, 148.53, 155.27, 156.37, 168.75, 151.2, 182.2, 152.37, 174.68)
marathon=marathon*60
country=c('argentin', 'kenya', 'israel', 'italy', 'png', 'spain', 'indonesi', 'guatemal', 'domrep', 'singapor', 'wsamoa', 'switzerl', 'austria', 'usa', 'nz', 'belgium', 'turkey', 'thailand', 'canada', 'burma', 'mexico', 'malaysia', 'dprkorea', 'denmark', 'ussr', 'norway', 'netherla', 'korea', 'mauritiu', 'finland', 'czech', 'sweden', 'cookis', 'poland', 'rumania', 'china', 'costa', 'japan', 'chile', 'bermuda', 'ireland', 'columbia', 'gbni', 'taipei', 'philippi', 'india', 'frg', 'france', 'hungary', 'brazil', 'portugal', 'greece', 'australi', 'luxembou')
track=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
track.pc <- princomp(track, var = TRUE, scores = TRUE)
track.pc <- princomp(track, cov = TRUE, scores = TRUE)
help(princomp)
velocity = data.frame(100/m100,200/m200,400/m400,800/m800,1500/m1500,3000/m3000,42195/marathon)
track.pc <- princomp(track, cor =F, scores = TRUE)
summary(track.pc)
track.pc <- princomp(track, cor =T, scores = TRUE)
summary(track.pc)
velocity.pc <- princomp(velocity, cor =F, scores = TRUE)
summary(velocity.pc)
dat <- dat[,-c(11, 13)]
cdat <- dat[,c(1:10)]
pca <- princomp(cdat, cor=TRUE)
summary(pca)
pca$loadings
biplot(pca)
biplot(pca, col=c(0, 2))
cor.cdat <- cor(cdat)
cdat.eigen <- eigen(cor.cdat)
cdat.eigen$values/sum(cdat.eigen$values)
summary(pca)
cdat.eigen$vectors
cdat.eigen$vectors
pca$loadings
cdat.standardized <- scale(cdat)
#scale function standardizes the data.
cdat.my.scores <- cdat.standardized %*% cdat.eigen$vectors
cdat.my.scores - pca$scores
cov.pc <- princomp(track, cor =F, scores = TRUE)
summary(cov.pc)
# 1
cor.pc <- princomp(track, cor =T, scores = TRUE)
summary(cor.pc)
# 3
velocity.pc <- princomp(velocity, cor =F, scores = TRUE)
summary(velocity.pc)
cov.pc$loadings
cor.pc$loadings
velocity.pc$loadings
velocity.pc$loadings
cov.pc$loadings
velocity.pc$loadings
cor.pc <- princomp(track, cor =T, scores = TRUE)
summary(cor.pc)
velocity.pc <- princomp(velocity, cor =F, scores = TRUE)
summary(velocity.pc)
# 2
cov.pc$loadings
cor.pc$loadings
View(velocity)
burden<- read.csv("Documents/stat306/lab11/burden.csv", header = TRUE)
burden<- burden[, -c(1, 26)]
pca <- princomp(burdan, cor=F, scores=T)
pca <- princomp(burden, cor=F, scores=T)
summary(pca)
pca$loadings
summary(pca)
pca <- princomp(burden, cor=T, scores=T)
pca <- princomp(burden, cor=T, scores=T)
summary(pca)
pca$loadings
dt <- read.csv('Documents/stat443/hw6/data.csv')
dt.ts <- ts(dt)
dt.ts
view(dt.ts)
dt.ts <- ts(dt)
View(dt)
View(dt)
dt.ts <- ts(dt#x)
dt.ts <- ts(dt$x)
dt.ts <- ts(dt$x)
view(dt.ts)
spc1 <- spec.pgram(dt.ts, log = 'no')
1+0.87^2
spc1
freq<-spc1$freq
max(freq)
freq[136]
0.272*2*pi
1.709026
cos(1.709026)
spc1$spec[136]
spc1$spec[136]/pi
cos(1.709026)
4.676021/pi
1.7569+2*0.87*cos(1.709026)
(1.7569+2*0.87*cos(1.709026))/pi
1.488424-0.4829224
spc2 <- spec.pgram(dt.ts, log = 'no', span=c(12))
spc2$spec[136]
spc2$spec[136]/pi
cos(pi)
freq[136]
0.272*pi
(1.7569+2*0.87*cos(0.272*pi))/pi
(1.7569+2*0.87*cos(0.272*pi))/pi
(1.7569+2*0.87*cos(0.272*2*pi))/pi
#0.4829224*2.31^2
0.4829224*2.31^2
spc2$spec[136]/pi
1.488424-2.576922
2.576922-3.369148
4.676021/pi
1.488424-2.576922
#1.005502
0.4829224*(2.31^2)
0.4829224*(2.31^2)
1.488424-2.576922
#1.088498
dat2 <- read.csv('Documents/stat443/hw6/dat2.csv')
acf(dat2)
acf(dat2, lag='20')
dat2
acf(dat2$x, lag='20')
spc1.2<-spec.pgram(dat2, log=no)
spc1.2<-spec.pgram(dat2, log='no')
which.max(spc1.2$freq)
spc1.2$freq[60]
which.max(spc1.2$spec)
spc1.2$freq[72]
which.max(spc1.2$spec)
spc1.2<-spec.pgram(dat2, log='no')
which.max(spc1.2$spec)
max(spc1.2$spec)
which.max(spc1.2$spec)
spc1.2[72]
spc3<-spec.pgram(dat2, log='no')
which.max(spc3$spec)
head(spc3)
spc3$freq[12]
spc4<-spec.pgram(dat2, log='no', span(8,10))
spc4<-spec.pgram(dat2, log='no', span=c(8,10))
spc4$spec
spc4<-spec.pgram(dat2$x, log='no', span=c(8,10))
spc4$spec
which.max(spc4$spec)
spc4$freq[12]
0.0486+40* 0.0215
1/(1+exp(-2.044348+40*0.096834))
1/(1+exp(-(-2.044348+40*0.096834))
1/(1+exp(-(-2.044348+40*0.096834))
1/(1+exp(-(-2.044348+40*0.096834))
)
1/(1+exp(-(-2.044348+40*0.096834)))
0.0486+40* 0.0215
0.096834+0.008549
0.096834-0.008549
#0.088285
0.096834+1.96*0.008549
0.096834-1.96*0.008549
#0.08007796
0.179870+1.96*0.087679
0.179870-1.96*0.087679
set.seed(1)
x <- sort(rnorm(20, mean=0, sd=2))
y <- x + rnorm(20, mean=0, sd=1)
dat <- cbind(x, y)
par(mfrow=c(1, 2))
plot(x, y, type="n", main="The Original X and Y", xlim=c(-4, 4), ylim=c(-4, 4))
text(x, y, as.character(1:20))
arrows(-4, -4, 4, 4, lty=1, col="red")
arrows(2, -2, -2, 2, lty=2, col="red")
#You can find that the x and y are all around the line of Y=X and
#most variability of the data is in the direction of this line,
#while little variability is on the Y=-X direction.
#But in practice, how could we find this direction?
#This leads us to do a principal component analysis of the data.
dat.pc <- princomp(dat, cor = TRUE, scores = TRUE)
summary(dat.pc)
#Importance of components:
#                          Comp.1     Comp.2
#Standard deviation     1.3793090 0.31226068
#Proportion of Variance 0.9512466 0.04875336
#Cumulative Proportion  0.9512466 1.00000000
#The first principal component explains 95% of the variation in the data.
wMx <- loadings(dat.pc)
#Loadings:
wMx
wMx[2,1]/wMx[1,1]
plot(dat.pc$scores, type="n", main="The New Coordinate System", xlim=c(-4, 4), ylim=c(-4, 4))
text(dat.pc$scores[,1], dat.pc$scores[,2], as.character(1:20) )
arrows(-4, 0, 4, 0, lty=1, col="red")
arrows(0,-2, 0,  2, lty=2, col="red")
dat <- read.table("Documents/stat306/lab11/decathlon.txt", header=T)
dat <- dat[,-c(11, 13)]
#Let's perform a principal component analysis on the correlation matrix of the athletes' performance in the 10 events.
cdat <- dat[,c(1:10)]
pca <- princomp(cdat, cor=TRUE)
`Residential.Building.Permits.(Units).Total,.All.Types` <- read.csv("~/Downloads/Residential Building Permits (Units) Total, All Types.csv")
View(`Residential.Building.Permits.(Units).Total,.All.Types`)
`Residential.Building.Permits.(Units).Apartments` <- read.csv("~/Downloads/Residential Building Permits (Units) Apartments.csv")
View(`Residential.Building.Permits.(Units).Apartments`)
View(`Residential.Building.Permits.(Units).Apartments`)
View(`Residential.Building.Permits.(Units).Total,.All.Types`)
View(`Residential.Building.Permits.(Units).Apartments`)
View(`Residential.Building.Permits.(Units).Apartments`)
`Residential.Building.Permits.(Units).Single.Dwellings` <- read.csv("~/Downloads/Residential Building Permits (Units) Single Dwellings.csv")
View(`Residential.Building.Permits.(Units).Single.Dwellings`)
View(`Residential.Building.Permits.(Units).Total,.All.Types`)
load("~/dev/prisma/hello-database-only/BIOL_courses_ubc.csv")
load("~/dev/prisma/hello-database-only/data/001.csv")
`001` <- read.csv("~/dev/prisma/hello-database-only/data/001.csv")
View(`001`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")
View(`002`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")
>   View(`003`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")
>   View(`004`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")View(`004`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")View(`004`)
`002` <- read.csv("~/dev/prisma/hello-database-only/data/003.csv")
`002` <- read.csv("~/dev/prisma/hello-database-only/data/002.csv")
`003` <- read.csv("~/dev/prisma/hello-database-only/data/003.csv")
`004` <- read.csv("~/dev/prisma/hello-database-only/data/004.csv")
004["subject"] <- "Biology"
View(`001`)
df <- 001
View(`001`)
View(`001`)
View(`001`)
df.math <- `001`
df.physics <- `002`
df.chemistry <- `003`
df.biology <- `004`
df.math["Subject"] <- "Math"
View(df.math)
df.math["subject"] <- "Math"
View(df.math)
df.math <- subset(df.math, -c("Subject"))
df.math <- subset(df.math, -c(Subject))
df.math <- subset(df.math, -c(3))
df.math <- subset(df.math, select=-c(c))
df.math[ , -which(names(df.math) %in% c("Subject"))]
df.math<-df.math[ , -which(names(df.math) %in% c("Subject"))]
df.physics["subject"] <- "Physics"
df.biology["subject"] <- "Biology"
df.chemistry["subject"] <- "Chemistry"
df <- rbind(df.math, df.biology)
df <- rbind(df, df.chemistry)
df <- rbind(df, df.physics)
df['university'] <- "UBC"
write.csv(df, file = "courses.csv")
df['_typeName'] <- "Course"
df['description'] <- ""
view['df']
view("df")
View(`004`)
View(`004`)
View('df')
View(df)
write.csv(df, file = "courses.csv")
names(df)
c(16:17,1:15)
colref <- c(5, 1:4, 6)
colref
df <- df[, colref]
write.csv(df, courses.csv)
write.csv(df, file = "courses.csv")
iinstall.packages("dpylr")
install.packages("dpylr")
install.packages("dplyr")
library('dplyr')
rename(df, code = Course, title = Title)
df.1 <- rename(df, code = Course, title = Title)
View(df.1)
View(df.1)
df <- df.1
write.csv(df, file="courses.csv")
setwd("~/dev/graphcool/enum")
write.csv(df, file="courses.csv", row.names=FALSE)
write.csv(df, file="courses.csv", row.names=FALSE, header.names=FALSE)
write.csv(df, file="courses.csv", row.names= F, col.names= F)
write.csv(df, file="courses.csv", row.names=FALSE, col.names=FALSE)
write.csv(df, file="courses.csv", row.names=FALSE, col.names=FALSE, sep = ",")
write.table(df, file="courses.csv", row.names=FALSE, col.names=FALSE, sep = ",")
install stringi
install.packages("stringi")
system.time(X <- stri_rand_strings(250000, 12))
library(stringi)
system.time(X <- stri_rand_strings(250000, 12))
head(X)
head(X[1:20])
X[1:20]
system.time(X <- stri_rand_strings(404, 12))
df["id"] <- X
View(df.1)
View(df)
pw
pwd
setwd("~/dev/graphcool/enum/data")
setwd("~/dev/graphcool/enum")
write.table(df, file="courses.csv", row.names=FALSE, col.names=FALSE, sep = ",")
View(df)
df['code']
df['code'][5]
df['code'](5)
library(stringr)
install.packages(stringr)
install.packages('stringr')
install.packages("stringr")
library(stringr)
df['code'].apply(stri_replace_all_fixed(x, " ", ""))
apply(df['code'],2,stri_replace_all_fixed(x, " ", ""))
library(stringr)
library('stringr')
str_replace_all(string=a, pattern=" ", repl="")
a="aa bb cc"
str_replace_all(string=a, pattern=" ", repl="")
apply(df['code'],2,str_replace_all_fixed(x, " ", ""))
apply(df['code'],2,str_replace_all(x, " ", ""))
as.data.frame(apply(df,2,function(x)gsub('\\s+', '',x)))
df<-as.data.frame(apply(df,2,function(x)gsub('\\s+', '',x)))
df
Vew('df')
View('df')
View(df)
setwd("~/dev/graphcool/import")
write.table(df, file="courses.csv", row.names=FALSE, col.names=FALSE, sep = ",")
df<-as.data.frame(apply(df,2,function(x)gsub('\\s+', '',x)))
View(df.1)
library('stringi')
df.1['id'] <- stri_rand_strings(404, 12)
View(df.1)
View(df.1)
df <- df.1
df['code']<-as.data.frame(apply(df['code'],2,function(x)gsub('\\s+', '',x)))
View('df')
df <- df.1
ls
df.code <- as.data.frame(apply(df['code'],2,function(x)gsub('\\s+', '',x)))
df.code
df['code'] <- as.data.frame(apply(df['code'],2,function(x)gsub('\\s+', '',x)))
View(df)
setwd("~/dev/prisma/permission-test")
write.table(df, file="courses.csv", row.names=FALSE, col.names=FALSE, sep = ",")
save.image("~/dev/prisma/permission-test/course_dataframe.RData")
